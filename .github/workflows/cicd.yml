name: Deploy Node Application
on:
   push:
     branches:
       - master
jobs:
   build:
     runs-on: ubuntu-latest
     env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
     steps:
       - name: Checkout source
         uses: actions/checkout@v4
       - name: Logging in to AWS Elastic Container Registry
         run:  aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 884435848326.dkr.ecr.eu-north-1.amazonaws.com
       - name: Build Docker Image
         run:  docker build -t litenote-server:1.0 ./server
       - name: Tag Docker Image
         run:  docker tag litenote-server:1.0 884435848326.dkr.ecr.eu-north-1.amazonaws.com/litenote-server:1.0
       - name: Publish Image to AWS Elastic Container Registry
         run:  docker push 884435848326.dkr.ecr.eu-north-1.amazonaws.com/litenote-server:1.0
   deploy:
     needs: build
     runs-on: self-hosted
     env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        LITENOTE_MONGODB_LIVE_URL: ${{ secrets.LITENOTE_MONGODB_LIVE_URL }}
        LITENOTE_PORT: ${{ secrets.LITENOTE_PORT }}
        LITENOTE_CLOUDINARY_CLOUD_NAME: ${{ secrets.LITENOTE_CLOUDINARY_CLOUD_NAME }}
        LITENOTE_CLOUDINARY_API_KEY: ${{ secrets.LITENOTE_CLOUDINARY_API_KEY }}
        LITENOTE_CLOUDINARY_API_SECRET: ${{ secrets.LITENOTE_CLOUDINARY_API_SECRET }}
        LITENOTE_JWT_TOKEN_SECRET: ${{ secrets.LITENOTE_JWT_TOKEN_SECRET }}
        LITENOTE_FRONTEND_URL: ${{ secrets.LITENOTE_FRONTEND_URL }}
        LITENOTE_WELCOME_EMAIL: ${{ secrets.LITENOTE_WELCOME_EMAIL }}
        LITENOTE_VERIFICATION_EMAIL: ${{ secrets.LITENOTE_VERIFICATION_EMAIL }}
        LITENOTE_REPORT_EMAIL_OPENED: ${{ secrets.LITENOTE_REPORT_EMAIL_OPENED }}
        LITENOTE_REPORT_EMAIL_PENDING: ${{ secrets.LITENOTE_REPORT_EMAIL_PENDING }}
        LITENOTE_REPORT_EMAIL_CLOSED: ${{ secrets.LITENOTE_REPORT_EMAIL_CLOSED }}
        ADMIN_EMAILS: ${{ secrets.ADMIN_EMAILS }}
        LITENOTE_LOGO: ${{ secrets.LITENOTE_LOGO }}
        LITENOTE_RECAPTCHA_SERVER_SIDE_INTEGRATION_SECRET_KEY: ${{ secrets.LITENOTE_RECAPTCHA_SERVER_SIDE_INTEGRATION_SECRET_KEY }}
        LITENOTE_RECAPTCHA_PROJECT_ID: ${{ secrets.LITENOTE_RECAPTCHA_PROJECT_ID }}
        LITENOTE_GOOGLE_CLOUD_API_KEY: ${{ secrets.LITENOTE_GOOGLE_CLOUD_API_KEY }}
        LITENOTE_MAILTRAP_EMAIL_TOKEN: ${{ secrets.LITENOTE_MAILTRAP_EMAIL_TOKEN }}
        LITENOTE_PROJECT_GOOGLE_DRIVE_CLIENT_ID: ${{ secrets.LITENOTE_PROJECT_GOOGLE_DRIVE_CLIENT_ID }}
        LITENOTE_PROJECT_GOOGLE_DRIVE_API_KEY: ${{ secrets.LITENOTE_PROJECT_GOOGLE_DRIVE_API_KEY }}
     steps:
      - name: Logging in to AWS Elastic Container Registry
        run:  aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 884435848326.dkr.ecr.eu-north-1.amazonaws.com
      - name: Pull Image from AWS Elastic Container Registry
        run:  docker pull 884435848326.dkr.ecr.eu-north-1.amazonaws.com/litenote-server:1.0
      - name: Delete old container
        run:  docker rm -f litenote-server1 litenote-server2 litenote-server3
      - name: Print current directory
        run: pwd
      - name: Run server 1
        run: docker run --env-file environment.txt -d -p 5001:5000 --name litenote-server1 884435848326.dkr.ecr.eu-north-1.amazonaws.com/litenote-server:1.0
      - name: Run server 2
        run: docker run --env-file environment.txt -d -p 5002:5000 --name litenote-server2 884435848326.dkr.ecr.eu-north-1.amazonaws.com/litenote-server:1.0
      - name: Run server 3
        run: docker run --env-file environment.txt -d -p 5003:5000 --name litenote-server3 884435848326.dkr.ecr.eu-north-1.amazonaws.com/litenote-server:1.0